{"version":3,"sources":["Controllers/user.js","Components/Login.js","Components/Register.js","Components/partials/_Header.js","Components/partials/_AddBook.js","Components/partials/_Books.js","Components/partials/_BooksList.js","Controllers/book.js","Controllers/additionals.js","Components/UserDashboard.js","Components/partials/_UpdateEntry.js","Components/partials/_Entries.js","Components/partials/_EntryList.js","Components/partials/_AddEntry.js","Controllers/entry.js","Components/BookDashboard.js","Components/partials/_UpdateUser.js","Components/Profile.js","Components/partials/_Message.js","Components/partials/_MessagesList.js","Components/partials/_SendMessageForm.js","Components/Messages.js","Components/500.js","App.js","reportWebVitals.js","index.js"],"names":["URL","createUser","formData","a","fetch","method","headers","body","JSON","stringify","data","register","readOneUser","userID","token","json","readOne","updateOneUser","updateOne","logInUser","logIn","readAllBooksOfUser","readAllBooks","readAllMessagesOfUser","readAllMessages","deleteOneMessageOfUser","messageID","deleteOneMessage","sendOneMessageOfUser","senderID","sendOneMessage","Login","useState","email","setEmail","password","setPassword","history","useHistory","onSubmit","e","preventDefault","alert","console","log","document","cookie","result","_id","firstName","lastName","receivedToken","push","pathname","state","className","htmlFor","type","id","required","autoFocus","placeholder","value","onChange","target","to","Register","setFirstName","lasttName","setLastName","mobileNumber","setMobileNumber","then","Row","Header","user","Navbar","collapseOnSelect","expand","bg","variant","Container","Brand","href","Toggle","Collapse","Nav","AddBook","addBook","bookTitle","setBookTitle","creatorID","title","users","Books","book","onDelete","creationDate","Date","Card","Body","Title","Subtitle","toDateString","Text","totalReceived","totalDept","totalPaid","Link","onClick","BooksList","books","length","map","readOneBook","bookID","createOneBook","createOne","deleteOneBook","deleteOne","getCookie","cname","name","ca","decodeURIComponent","split","i","c","charAt","substring","indexOf","Dashboard","formToggle","setFormToggle","setBooks","userName","undefined","useEffect","isMounted","allBooks","fetchedBooks","deleteBook","filter","Button","UpdateEntry","onUpdate","entry","entryValue","setEntryValue","amount","Entries","toggleForm","setToggleForm","entryTitle","entryCreatorID","recipient","details","EntryList","entries","AddEntry","onAdd","setEntryTitle","entryType","setEntryType","setRecipient","setAmount","createOneEntry","updateOneEntry","entryID","deleteOneEntry","BookDashboard","setEntries","useParams","requiredBook","addEntry","newAddedEntries","deleteEntry","updateEntry","UpdateUser","Profile","MNO","setMNO","readLoggedInUser","updatePass","varient","Message","message","meg","senderFirstName","senderLastName","_MessagesList","messages","SendMessageForm","idValue","setIdValue","setMessage","msg","Messages","messageFormToggle","setMessageFormToggle","setMessages","getMessages","sendMessage","receiverID","deleteMessages","Error500","App","exact","path","UserDashboard","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.fcd20063.chunk.js","sourcesContent":["// contains all the fetch methods for user\n\nconst URL = 'https://entry-book.herokuapp.com';\n\n\n// create user (register)\nconst createUser = async (formData) => {\n    const data = await fetch(URL+'/user',{\n        method: 'POST',\n        headers:{\n            // 'Access-Control-Allow-Origin': 'no-cors',\n            'Content-Type':'application/json'\n        },\n        body: JSON.stringify(formData)\n    });\n\n    return data\n}\n\nexport const register = createUser;\n\n// read a single user with id\nconst readOneUser = async(userID,token) => {\n    // const id = typeof(userID) === 'string' ? userID : userID.toString();\n    const data = await fetch(URL+'/user/'+userID,{\n        headers:{\n            'auth-token': token\n        }\n    })\n\n    return data.json()\n}\n\nexport const readOne = readOneUser\n\n// update a single user with id\nconst updateOneUser = async(userID,token, formData) => {\n    // const id = typeof(userID) === 'string' ? userID : userID.toString();\n    const data = await fetch(URL+'/user/'+userID,{\n        method: 'PATCH',\n        headers:{\n            'Content-Type':'application/json',\n            'auth-token': token\n        },\n        body: JSON.stringify(formData)\n    })\n\n    return data.json()\n}\n\nexport const updateOne = updateOneUser\n\n// delete a single user with id\nconst deleteOneUser = async(userID,token) => {\n    const id = typeof(userID) === 'string' ? userID : userID.toString();\n    const data = await fetch(URL+'/user/'+id,{\n        method: 'DELETE',\n        headers:{\n            'auth-token': token\n        }\n    })\n\n    return data.json()\n}\n\nexport const deleteOne = deleteOneUser\n\n// login\nconst logInUser = async(formData) => {\n    const data = await fetch(URL+'/user/login',{\n        method: 'POST',\n        headers:{\n            'Content-Type':'application/json'\n        },\n        body: JSON.stringify(formData)\n    })\n\n    return data.json()\n}\n\nexport const logIn = logInUser\n\n// read all users\nconst readAllUsers = async (token) => {\n    const data = await fetch(URL+'/user',{\n        headers:{\n            'auth-token': token\n        }\n    })\n\n    return data.json()\n}\n\nexport const readAll = readAllUsers\n\n// view all the books of the user\nconst readAllBooksOfUser = async(token) => {\n    const data = await fetch(URL+'/user/books',{\n        headers:{\n            'auth-token': token\n        }\n    })\n\n    return data.json()\n}\n\nexport const readAllBooks = readAllBooksOfUser\n\n// read messages\nconst readAllMessagesOfUser = async(token) => {\n    const data = await fetch(URL+'/user/messages',{\n        headers:{\n            'auth-token':token\n        }\n    })\n\n    return await data.json()\n}\n\nexport const readAllMessages = readAllMessagesOfUser    \n\n// read a single message\nconst readOneMessageOfUser = async (token,userID) => {\n    // const id = typeof(userID) === 'string' ? userID : userID.toString();\n    const data = await fetch(URL+'/user/message/'+userID,{\n        headers:{\n            'auth-token': token\n        }\n    })\n\n    return data.json()\n\n}\n\nexport const readOneMessage = readOneMessageOfUser\n\n// delete message\nconst deleteOneMessageOfUser = async (token,messageID) => {\n    // const id = typeof(userID) === 'string' ? userID : userID.toString();\n    const data = await fetch(URL+'/user/message/'+messageID,{\n        method: 'DELETE',\n        headers:{\n            'auth-token': token\n        }\n    })\n\n    return data.json()\n\n}\n\nexport const deleteOneMessage = deleteOneMessageOfUser\n\n// send a message\nconst sendOneMessageOfUser = async (token,senderID,formData) => {\n    // const id = typeof(userID) === 'string' ? userID : userID.toString();\n    const data = await fetch(URL+'/user/message/'+senderID,{\n        method: 'POST',\n        headers:{\n            'Content-Type':'application/json',\n            'auth-token': token\n        },\n        body: JSON.stringify(formData)\n    })\n\n    return data.json()\n\n}\n\nexport const sendOneMessage = sendOneMessageOfUser\n\n// reaquest a book\nconst requestBookToUser = async (token, bookID) => {\n    // const id = typeof(bookID) === 'string' ? bookID : bookID.toString()\n    const data = await fetch(URL+'/user/request/'+bookID,{\n        headers:{\n            'auth-token': token\n        }\n    })\n\n    return data.json()\n}\n\nexport const requestBook = requestBookToUser\n\n// default export \nconst user = {\n    register: createUser,\n    logIn: logInUser,\n    readOne: readOneUser,\n    updateOne: updateOneUser,\n    deleteOne: deleteOneUser,\n    readAll: readAllUsers,\n    readAllBooks: readAllBooksOfUser,\n    readAllMessages: readAllMessagesOfUser,\n    readOneMessage: readOneMessageOfUser,\n    deleteOneMessage: deleteOneMessageOfUser,\n    sendOneMessage: sendOneMessageOfUser,\n    requestBook: requestBookToUser\n}\n\nexport default user","import { useState } from 'react';\nimport { Link, useHistory } from 'react-router-dom'\n\nimport { logIn } from '../Controllers/user'\n\nconst Login = () => {\n\n    const [email, setEmail] = useState('')\n    const [password, setPassword] = useState('')\n    const [token, setToken] = useState('')\n    const [user, setUser] = useState('')\n\n    const history = useHistory()\n\n\n    const onSubmit = async (e) => {\n        e.preventDefault()\n\n\n        if(!email && !password){\n            alert(' Invalid Request ')\n            return\n        }\n\n        // here goes the function which will be used to log in\n\n        const formData = {\n            email: email,\n            password: password\n        }\n\n        const data = await logIn(formData)\n\n        console.log(data)\n        document.cookie = `token=${data.result[0]};max-age=86400,domain=localhost:3000`\n        document.cookie = `entry-app-user-id=${data.result[1]._id};max-age=86400,domain=localhost:3000`\n        document.cookie = `entry-app-user-name=${data.result[1].firstName + ' '+data.result[1].lastName};max-age=86400,domain=localhost:3000`\n        document.cookie = `entry-app-user-email=${data.result[1].email};max-age=86400,domain=localhost:3000`\n\n       const receivedToken = data.result[0]\n\n        // console.log(token)\n\n        history.push({\n            pathname: '/user',\n            state: { token: receivedToken }\n        })\n\n        setEmail('')\n        setPassword('')\n    }\n\n    return (\n        <div className=\"signin-form-wrapper\">\n            <form onSubmit={ onSubmit } className='form-signin pt-3 pb-3'>\n                <h1 className=\"page-title mb-3 font-weight-normal\"> Sign In </h1>\n                <div>\n                    <label htmlFor='email'> Email </label>\n                    <input type='email' id='email' required autoFocus className=\"form-control\" placeholder='Enter Email' value={ email } onChange={ (e) => setEmail(e.target.value) }/>\n                </div>\n                <br />\n                <div>\n                    <label htmlFor='password'> Password </label>\n                    <input type='password' id='password' required autoFocus className=\"form-control\" placeholder='enter password'  value={ password } onChange={ (e) => setPassword(e.target.value)}/>\n                </div>\n                <br />\n                <input type=\"submit\" className='btn btn-primary btn-block' value='Log In' />\n                <br />\n                <p className='align-right'> Not registered? <Link to='/register'> Register here </Link> </p>\n            </form>\n\n          \n        </div>\n\n    )\n}\n\nexport default Login\n","import { useState } from 'react';\nimport { Link, useHistory } from 'react-router-dom'\nimport Row  from 'react-bootstrap/Row';\n\n// importing regsiter user function\nimport { register } from '../Controllers/user'\n\nconst Register = () => {\n\n    const [firstName, setFirstName] = useState('')\n    const [lasttName, setLastName] = useState('')\n    const [mobileNumber, setMobileNumber] = useState('')\n    const [email, setEmail] = useState('')\n    const [password, setPassword] = useState('')\n\n    const history = useHistory();\n\n    const onSubmit = async (e) => {\n        e.preventDefault();\n\n      \n\n        if(!firstName&& !lasttName && !mobileNumber && !email && !password){\n            alert(' Please fill in the required fields. ')\n            return\n        }\n\n        // here we will register the user\n        const formData = {\n            firstName: firstName,\n            lastName: lasttName,\n            mobileNumber: mobileNumber,\n            email: email,\n            password: password\n        }\n\n        const user = await register(formData)\n        \n        user.json().then(data => {\n            history.push('/')\n        })\n    \n        // set the fields to blank\n        setFirstName('')\n        setLastName('')\n        setMobileNumber('')\n        setEmail('')\n        setPassword('')\n    }\n\n    return (\n        <div className=\"register-form-wrapper\">\n            <form onSubmit={ onSubmit } className='form-register'>\n                <h1 className=\"page-title mb-3 font-weight-normal\"> Register </h1>\n                <Row>\n                    <div className=\"col-sm-6\">\n                        <br />\n                        <label htmlFor='firstName'> First Name </label>\n                        <input type='text' id='firstName' className='form-control' required autoFocus value={ firstName } onChange={ (e) => setFirstName(e.target.value) } placeholder='Enter your first Name'/>\n                    </div>\n                    <div className=\"col-sm-6\">\n                        <br />\n                        <label htmlFor='lastName'> Last Name </label>\n                        <input type='text' id='lasttName' className='form-control' required autoFocus value={ lasttName } onChange={ (e) => setLastName(e.target.value) } placeholder='Enter your last name'/>\n                    </div>\n                   \n                    <div className=\"col-sm-12\">\n                        <br />\n                        <label htmlFor='mobileNumber'> Mobile Number </label>\n                        <input type='text' id='mobileNumber' className='form-control' required autoFocus value={ mobileNumber } onChange={ (e) => setMobileNumber(e.target.value) } placeholder='Enter your mobile number'/>\n                    </div>\n                  \n                    <div className=\"col-sm-12\">\n                        <br />\n                        <label htmlFor='email'> Email </label>\n                        <input type='email' id='email' className='form-control' required autoFocus value={ email } onChange={ (e) => setEmail(e.target.value) }  placeholder='Enter your email address'/>\n                    </div>\n                  \n                    <div className=\"col-sm-12\">\n                        < br />\n                        <label htmlFor='password'> Password </label>\n                        <input type='password' id='password' className='form-control' required autoFocus value={ password } onChange={ (e) => setPassword(e.target.value) } placeholder='Enter your password'/>\n                    </div>\n                </Row>\n                <br />\n\n                <input type='submit' className='btn btn-primary btn-block' value='register' />\n                <br />\n\n                <p> Already refistered? <Link to='/'> Login here. </Link> </p>\n            </form>\n        </div>\n    )\n}\n\nexport default Register\n","import { Link } from 'react-router-dom';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Container from 'react-bootstrap/Container';\n// import NavDropdown from 'react-bootstrap/NavDropdown'\nimport Nav from 'react-bootstrap/Nav'\nimport { FaEnvelope, FaUserCircle } from 'react-icons/fa'\n\n\n// header will take user name, id, and other stuff as props\nconst Header = ({ user }) => {\n    return (\n        <>\n        {/* <Router> */}\n            <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\n                <Container>\n                    <Navbar.Brand href=\"#home\"> {user} </Navbar.Brand>\n                    <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n                    <Navbar.Collapse id=\"responsive-navbar-nav\">\n                        <Nav className=\"mr-auto\">\n                        </Nav>\n                        <Nav>\n                        <Link className='nav-link' to=\"/profile\"> <FaUserCircle />&nbsp;Profile </Link>\n                        <Link className='nav-link' to=\"/messages\"> <FaEnvelope />&nbsp;Messages </Link>\n\n                        </Nav>\n                    </Navbar.Collapse>\n                </Container>\n            </Navbar>\n        {/* </Router> */}\n        </>\n    )\n}\n\nexport default Header\n","import { useState } from 'react';\n\n//import { createOne } from '../../controllers/book'\n\nconst AddBook = ({ token, addBook, user }) => {\n\n    const [bookTitle, setBookTitle] = useState('');\n\n    const onSubmit = async (e) => {\n        e.preventDefault()\n        if(!bookTitle){\n            alert('Please give the book a title');\n            return\n        }\n\n        // here, we will create a new book\n        const formData = {\n            creatorID: user,\n            title: bookTitle,\n            users: user\n        }\n\n        addBook(token, formData)\n    \n        // reset the input.value\n        setBookTitle(''); \n    }\n\n    return (\n        <form className='addBook-form' onSubmit={ onSubmit }>\n            <br />\n           <input type='text' id='bookTitle' required autoFocus className='form-control' placeholder='Enter Book Title' value={ bookTitle } onChange={ (e) => setBookTitle(e.target.value)}/>\n           <input type='submit' className='btn btn-primary'  value='Add Book'/>\n        </form>\n    )\n}\n\nexport default AddBook\n","import { Link } from 'react-router-dom'\nimport Card from 'react-bootstrap/Card';\nimport Row from 'react-bootstrap/Row';\n\n// This will render the book card\n\n// This will take the book as the prop\nconst Books = ({ book, onDelete, token }) => {\n\n    const creationDate = new Date(book.creationDate)\n    return (\n        <div className=\"col-sm-4 book-wrapper\" >\n        <Card className=\"book-card\">\n            <Card.Body>\n                <Card.Title className=\"book-title\">\n                  {book.title}\n                </Card.Title>\n                <Card.Subtitle className=\"book-creator\">  Created At : { creationDate.toDateString() } </Card.Subtitle>\n                <Card.Text className=\"book-info\">\n                    <Row>\n                        <div className='col-lg-4'>\n                            <p> Received </p>\n                            {book.totalReceived}\n                        </div>\n                        <div className='col-lg-4'>\n                            <p>  Dept </p>\n                            {book.totalDept}\n                        </div>\n                        <div className='col-lg-4'>\n                            <p>  Paid </p>\n                            {book.totalPaid}\n                        </div>\n                    </Row>\n                </Card.Text>\n                <Card.Link className='btn btn-primary' onClick = {() => onDelete(token, book._id) }> Delete </Card.Link>\n                <Link to= { `/book/${book._id}` } className='btn btn-success card-link' > More info </Link>\n            </Card.Body>\n        </Card>\n        </div>\n    )\n}\n\nexport default Books\n","import Row from 'react-bootstrap/Row'\nimport Books from './_Books';\n\nconst BooksList = ({ books, onDelete, token }) => {\n\n    return (\n       <>\n           {books.length === 0 ? 'No Books Found' :\n             <Row className=\"book-list\">\n                { books.map(book => (\n                    <Books key={ book._id } book = { book } onDelete={ onDelete } token = { token }/> \n                )) }\n            </Row>\n           }\n       </>\n    )\n}\n\nexport default BooksList\n","// contains all the fetch methods for book\n\nconst URL = 'https://entry-book.herokuapp.com';\n\n\n// read all books\nconst readAllBooks = async(token) => {\n    const data=  await fetch(URL+'/book',{\n        headers:{\n        'auth-token': token,\n        }\n    })\n\n    return data.json()\n}\n\nexport const readAll = readAllBooks\n\n// read a book\nconst readOneBook = async(token, bookID) => {\n    // const id = typeof(bookID) === 'string' ? bookID : bookID.toString();\n    const data = await fetch(URL+'/book/'+bookID,{\n        headers:{\n            'auth-token': token\n        }\n    })\n\n    return data.json()\n}\n\nexport const readOne = readOneBook\n\n// create a book\nconst createOneBook = async(token,formData) => {\n    const data = await fetch(URL+'/book',{\n        method: 'POST',\n        headers:{\n            'Content-Type': 'application/json',\n            'auth-token': token\n        },\n        body: JSON.stringify(formData)\n    })\n\n    return data.json()\n}\n\nexport const createOne = createOneBook\n\n// update a book \nconst updateOneBook = async(token, bookID,formData) => {\n    // const id = typeof(bookID) === 'string' ? bookID : bookID.toString();\n    const data = await fetch(URL+'/book/'+bookID,{\n        method: 'PATCH',\n        headers:{\n            'Content-Type':'application/json',\n            'auth-token': token\n        },\n        body: JSON.stringify(formData)\n    })\n\n    return data.json()\n}\n\nexport const updateOne = updateOneBook\n\n// delete a book\nconst deleteOneBook = async(token, bookID) => {\n    // const id = typeof(bookID) === 'string' ? bookID : bookID.toString()\n    const data = await fetch(URL+'/book/'+bookID,{\n        method: 'DELETE',\n        headers:{\n            'auth-token': token\n        }\n    })\n\n    return data.json()\n}\n\nexport const deleteOne = deleteOneBook\n\n// view all users of the book\nconst readAllUsersOfBook = async(token, bookID) => {\n    // const id = typeof(bookID) === 'string' ? bookID : bookID.toString()\n    const data = await fetch(URL+'/book/user/'+bookID,{\n        headers:{\n            'auth-token': token\n        }\n    })\n\n    return data.json()\n}\n\nexport const readAllUsers = readAllUsersOfBook\n\n// default export\nconst book = {\n    readAll: readAllBooks,\n    readOne: readOneBook,\n    createOne: createOneBook,\n    updateOne: updateOneBook,\n    deleteOne: deleteOneBook,\n    readAllUsers: readAllUsersOfBook\n}\n\nexport default book","function getCookie(cname) {\n    var name = cname + \"=\";\n    var decodedCookie = decodeURIComponent(document.cookie);\n    var ca = decodedCookie.split(';');\n    for(var i = 0; i <ca.length; i++) {\n      var c = ca[i];\n      while (c.charAt(0) === ' ') {\n        c = c.substring(1);\n      }\n      if (c.indexOf(name) === 0) {\n        return c.substring(name.length, c.length);\n      }\n    }\n    return \"\";\n  }\n\nexport default getCookie","import { useState,useEffect } from 'react'\nimport { useHistory } from 'react-router-dom';\nimport Container from 'react-bootstrap/Container'\nimport Button from 'react-bootstrap/Button'\nimport Header from './partials/_Header'\nimport AddBook from './partials/_AddBook'\nimport BooksList from './partials/_BooksList';\n\nimport { readAllBooks } from '../Controllers/user'\nimport { createOne } from '../Controllers/book'\nimport { deleteOne } from '../Controllers/book'\n\nimport getCookie from '../Controllers/additionals'\n\nconst Dashboard = () => {\n\n    const [formToggle, setFormToggle] = useState(false)\n    const [books, setBooks] = useState([])\n\n    const history = useHistory()\n\n    const token = getCookie('token');\n    const userID = getCookie('entry-app-user-id');\n    const userName = getCookie('entry-app-user-name');\n    // console.log(token, userID, userName)\n\n    if(token === undefined){\n        history.push('/')\n    }\n\n    // use onEffect to get all the books of the user\n    useEffect(() => {\n        let isMounted = true\n        const fetchedBooks = async () => {\n           if(isMounted){\n                try {\n                    const allBooks = await readAllBooks(token)\n                    // console.log(allBooks)\n                    setBooks(allBooks.result)\n                } catch(error) {\n                     history.push('/500')   \n                }\n           }\n        }\n        fetchedBooks()\n        return () => { isMounted = false }\n    }, [books,token,history])\n\n    // Add Book function\n    const addBook = async (token, formData) => {\n        const data = await createOne(token,formData)\n        setBooks([...books, data.result])\n    }\n\n    // Delete book function\n    const deleteBook = async (token, id) => {\n        await deleteOne(token, id)\n        // setBooks([...books, data.result])\n        setBooks(books.filter((book) => book._id !== id))\n    }\n\n\n    return (\n        <>\n        <Header user = { userName }/>\n        <Container>\n           <h1 className=\"page-title font-weight-normal mb-3\"> Books </h1>\n           <Button className=\"btn btn-primary\" onClick = { () => setFormToggle(!formToggle) }>\n               Add new Book\n           </Button>\n\n           { formToggle && <AddBook  token = { token } addBook = { addBook } user = { userID }/> } \n\n           <BooksList books = { books } onDelete = { deleteBook } token ={ token } />\n        </Container>\n        </>\n    )\n}\n\nexport default Dashboard\n","import { useState } from 'react'\n\nconst UpdateEntry = ({ onUpdate, bookID, entry, token }) => {\n\n    const [entryValue, setEntryValue] = useState(0)\n\n    const onSubmit = (e) => {\n        e.preventDefault()\n\n        if(entryValue <= 0){\n            alert('Please enter value.')\n            return\n        }\n\n        // here we will update the entry value\n        const formData = entry\n        formData.amount = entryValue\n\n        const data = onUpdate(bookID, entry._id, token, formData)\n        console.log(data)\n        // reset the field\n        setEntryValue(0);\n    }\n\n    return (\n        <form onSubmit = { onSubmit } className='form-update-entry'>\n            <br />\n            <input type='number' className='form-control' id='updateEntryVal' value={ entryValue } onChange={ (e) => setEntryValue(e.target.value) } placeholder='Enter Updated value'/>\n            <input type='submit' value='Update Entry' className='btn btn-primary' />\n        </form>\n    )\n}\n\nexport default UpdateEntry\n","import { useState } from 'react'\nimport Card from 'react-bootstrap/Card'\nimport UpdateEntry from './_UpdateEntry'\n\nconst Entries = ({ entry, token, bookID, onDelete, onUpdate }) => {\n\n    const [toggleForm, setToggleForm] = useState(false);\n\n    const toggleUpdateEntryForm = (e) => {\n        e.preventDefault()\n        setToggleForm(!toggleForm)\n    }\n\n    return (\n        <div className='col-md-6'>\n            <Card className='entry-card'>\n            <Card.Body>\n                <Card.Title className=\"entry-title\">\n                    { entry.entryTitle }\n                </Card.Title>\n                <Card.Subtitle className=\"entry-creator\"> { entry.entryCreatorID } </Card.Subtitle>\n                <Card.Text className=\"entry-info\">\n                    <p> Amount : { entry.amount } </p>\n                    <p> Type : { entry.type } </p>\n                    <p> Recipient : { entry.recipient } </p>\n                    <p> Details : { entry.details } </p>\n                </Card.Text>\n                {entry.type === 'dept' && <Card.Link className='btn btn-primary' onClick={ toggleUpdateEntryForm }> Update </Card.Link>}{/* Make update entries visible only if entries are of type dept */}\n                <Card.Link onClick = { () => onDelete(bookID, entry._id, token) }> Delete </Card.Link> \n\n                { toggleForm && <UpdateEntry  onUpdate = { onUpdate } bookID = { bookID } entry = { entry } token = { token }/> }\n            </Card.Body>        \n        </Card>\n        </div>\n    )\n}\n\nexport default Entries\n","import Row from 'react-bootstrap/Row'\nimport Entries from './_Entries'\n\nconst EntryList = ({ entries, token, bookID, onDelete, onUpdate }) => {\n    return (\n        <Row className='entry-list'>\n            {entries.length === 0 ?  'No entries found' \n                :entries.map((entry) => (\n                    <Entries key = { entry._id } token ={ token } bookID = { bookID } entry ={ entry } onDelete = { onDelete } onUpdate = { onUpdate }/>\n                ))\n            }\n        </Row>\n    )\n}\n\nexport default EntryList\n","import { useState } from 'react'\nimport Row from 'react-bootstrap/Row'\n\nconst AddEntry = ({ onAdd, bookID, token, userID }) => {\n\n    const [entryTitle, setEntryTitle] = useState('');\n    const [entryType, setEntryType] = useState('paid');\n    const [recipient, setRecipient] = useState('');\n    const [amount, setAmount] = useState(0);\n\n    const onSubmit = (e) => {\n        e.preventDefault()\n\n        if(!entryTitle && !entryType && !recipient && amount === 0 ){\n            alert('Fill all the necessary fields.')\n            return\n        }\n\n        const formData = {\n            entryTitle: entryTitle,\n            amount: amount,\n            type: entryType,\n            recipient: recipient,\n            entryCreatorID: userID,\n            bookID: bookID\n        }\n\n        // This is where we add new entry\n        onAdd(bookID, token,formData)\n\n        // reset the values\n        setEntryTitle('');\n        setEntryType('paid');\n        setRecipient('');\n        setAmount(0)\n    }\n\n    return (\n        <form className='form-register' onSubmit={ onSubmit }>\n            <Row>\n                <div className='col-sm-6'>\n                    <br />\n                    <input type='text' id='entryTitle' className='form-control' value={ entryTitle } onChange={ (e) => setEntryTitle(e.target.value) } placeholder='Enter Title' required/>\n                </div>\n                <div className='col-sm-6'>\n                    <br />\n                    <input type='text' id='entryType' className='form-control' value={ entryType } onChange={ (e) => setEntryType(e.target.value) } placeholder='Enter type' required/>  \n                </div>\n                <div className='col-sm-6'>\n                    <br />\n                    <input type='text' id='recipient' className='form-control' value={ recipient } onChange={ (e) => setRecipient(e.target.value) } placeholder='Enter recipient' required/>\n                </div>\n                <div className='col-sm-6'>\n                    <br />\n                    <input type='number' id='amount' className='form-control' value={ amount } onChange={ (e) => setAmount(e.target.value) } placeholder='Enter amount' required/>\n                </div>\n            </Row>\n\n            <br />\n            <input type='submit' className='btn btn-primary btn-block' value='Add Entry' />\n        </form>\n    )\n}\n\nexport default AddEntry\n","// contains all the fetch methods for entry\n\nconst URL = 'https://entry-book.herokuapp.com';\n\n// read all entries\nconst readAllEntries = async (bookID,token) => {\n    // const id = typeof(bookID) === 'string' ? bookID : bookID.toString()\n    const data = await fetch(URL+'/entry/'+bookID,{\n        headers:{\n            'auth-token':token\n        }\n    })\n\n    return data.json()\n}\n\nexport const readAll = readAllEntries\n\n// read an antry\nconst readOneEntry = async (bookID,entryID,token) => {\n    // const bid = typeof(bookID) === 'string' ? bookID : bookID.toString()\n    // const eid = typeof(entryID) === 'string' ? entryID : entryID.toString()\n    const data = await fetch(URL+'/entry/'+bookID+'/'+entryID,{\n        headers:{\n            'auth-token':token\n        }\n    })\n\n    return data.json()\n}\n\nexport const readOne = readOneEntry\n\n// create an entry\nconst createOneEntry = async (bookID,token,formData) => {\n    // const id = typeof(bookID) === 'string' ? bookID : bookID.toString()\n    const data = await fetch(URL+'/entry/'+bookID,{\n        method: 'POST',\n        headers:{\n            // 'Access-Control-Allow-Origin': '*',\n            'Content-Type': 'application/json',\n            'auth-token':token\n        },\n        body: JSON.stringify(formData)\n    })\n\n    return data.json()\n}\n\nexport const createOne = createOneEntry\n\n// update an entry\nconst updateOneEntry = async (bookID,entryID,token, formData) => {\n    // const bid = typeof(bookID) === 'string' ? bookID : bookID.toString()\n    // const eid = typeof(entryID) === 'string' ? entryID : entryID.toString()\n    const data = await fetch(URL+'/entry/'+bookID+'/'+entryID,{\n        method: 'PATCH',\n        headers:{\n            'Content-Type':'application/json',\n            'auth-token':token\n        },\n        body: JSON.stringify(formData)\n    })\n\n    return data.json()\n}\n\nexport const updateOne = updateOneEntry\n\n// delete an antry\nconst deleteOneEntry = async (bookID,entryID,token) => {\n    // const bid = typeof(bookID) === 'string' ? bookID : bookID.toString()\n    // const eid = typeof(entryID) === 'string' ? entryID : entryID.toString()\n    const data = await fetch(URL+'/entry/'+bookID+'/'+entryID,{\n        method: 'DELETE',\n        headers:{\n            'auth-token':token\n        }\n    })\n\n    return data.json()\n}\n\nexport const deleteOne = deleteOneEntry\n\n// default export object\nconst entry = {\n    readAll: readAllEntries,\n    readOne: readOneEntry,\n    createOne: createOneEntry,\n    updateOne: updateOneEntry,\n    deleteOne: deleteOneEntry\n}\n\nexport default entry","import { useState, useEffect } from 'react'\nimport { useHistory, useParams } from 'react-router-dom'\nimport Header from './partials/_Header'\nimport Container from 'react-bootstrap/Container'\nimport EntryList from './partials/_EntryList'\nimport AddEntry from './partials/_AddEntry'\n\nimport { readOne } from '../Controllers/book'\nimport { createOne, deleteOne, updateOne } from '../Controllers/entry'\nimport getCookie from '../Controllers/additionals'\n\nconst BookDashboard = () => {\n\n    // first, find the book with bookID\n\n    // then set the book tasks to tasks\n\n    const [toggleForm, setToggleForm] = useState(false)\n    const [entries, setEntries] = useState([])\n    const [bookTitle, setBookTitle] = useState('')\n\n    const history = useHistory()\n\n    const { bookID } = useParams()\n\n    // console.log(bookID)\n\n    // let book;\n\n    const token = getCookie('token');\n    const userID = getCookie('entry-app-user-id');\n    const userName = getCookie('entry-app-user-name');\n    // console.log(user)\n\n    if(token === undefined){\n        history.push('/')\n    }\n\n    useEffect(() => {\n        const requiredBook = async () => {\n           try {\n                const book = await readOne(token, bookID)\n                if(book.result !== null){\n                    setBookTitle(book.result.title)\n                    setEntries(book.result.entries)\n                }else{\n                    history.push('/500')\n                }\n           } catch (error) {\n               history.push('/500')\n           }\n        }\n\n        requiredBook()\n    }, [entries, token, bookID, history])\n\n    // add entry function\n    const addEntry = async (bookID, token, formData) => {\n        const newAddedEntries = await createOne(bookID, token, formData)\n        setEntries([...entries,newAddedEntries.result.entries])   \n    }\n\n    // delete entry function\n    const deleteEntry = async(bookID, entryID, token) => {\n        await deleteOne(bookID, entryID,token)\n        setEntries(entries.filter((entry) => entry._id !== entryID))\n    }\n\n    // update entry function\n    const updateEntry = async(bookID, entryID, token, formData) => {\n        const data = await updateOne(bookID, entryID, token, formData)\n        console.log(data)\n    }\n\n    return (\n        <>\n            <Header  user = { userName }/>\n            <Container>\n                <h1 className='page-title font-weight-normal pb-3'> { bookTitle } </h1>\n\n                <h3 className='page-title font-weight-normal pb-3'> Entries </h3>\n\n                <button className='btn btn-primary' onClick={ () => setToggleForm(!toggleForm) }>\n                    Add New Entry\n                </button>\n\n                { toggleForm && <AddEntry  onAdd = { addEntry } bookID = { bookID } token = { token } userID = { userID }/> }\n\n                <EntryList entries = { entries } token = { token } bookID = { bookID } onDelete = { deleteEntry } onUpdate = { updateEntry }/>\n\n\n            </Container>\n\n        </>\n    )\n}\n\nexport default BookDashboard\n","import { useState } from 'react'\n\nconst UpdateUser = ({ onUpdate, userID, token }) => {\n\n    const [password, setPassword] = useState('')\n\n    const onSubmit = (e) => {\n        e.preventDefault()\n\n        if(!password){\n            alert('Please enter password.')\n            return\n        }\n\n        // here we update password\n        const formData = {\n            password: password\n        }\n\n        onUpdate(userID, token, formData)\n\n        //for now, console,log the password\n        console.log(password);\n\n        //reset the fields\n        setPassword('')\n    }\n\n    return (\n        <form onSubmit = {onSubmit} >\n            <br />\n            <input type='password' className='form-control' value={password} onChange = { (e) => setPassword(e.target.value) } placeholder='Enter New Password'/>\n            <input type='submit' className='btn btn-primary' value='Update Password'/>\n        </form>\n    )\n}\n\nexport default UpdateUser\n","import { useState, useEffect } from 'react'\nimport { useHistory } from 'react-router-dom'\nimport Header from './partials/_Header'\nimport UpdateUser from './partials/_UpdateUser'\nimport Container from 'react-bootstrap/Container'\nimport Button from 'react-bootstrap/Button'\n\nimport { readOne, updateOne } from '../Controllers/user'\nimport getCookie from '../Controllers/additionals'\n\nconst Profile = () => {\n\n    const [toggleForm, setToggleForm] = useState(false);\n    const [email, setEmail] = useState('')\n    const [MNO, setMNO] = useState('')\n   \n    const token = getCookie('token');\n    const userID = getCookie('entry-app-user-id');\n    const userName = getCookie('entry-app-user-name');\n\n    const history = useHistory()\n\n    useEffect(() => {\n        const readLoggedInUser = async () => {\n           try {\n                const data = await readOne(userID, token) \n                if(data.result !== null){\n                    setEmail(data.result.email)\n                    setMNO(data.result.mobileNumber)\n                }else{\n                    history.push('/500')\n                }\n           } catch (error) {\n               history.push('/500')\n           }\n        }\n\n        readLoggedInUser()\n    },[userID, token,history])\n\n    // update user password\n    const updatePass = async (userID, token, formData) => {\n        await updateOne(userID, token, formData)\n    }\n\n    return (\n        <>\n            <Header  user = { userName }/>\n            <Container>\n                <h1> { userName } </h1>\n                <h3> { email } </h3>\n                <h3> { MNO } </h3>\n\n                <Button varient='primary' onClick = { () => setToggleForm(!toggleForm) }>\n                    Update Password\n                </Button>\n\n                { toggleForm && <UpdateUser  onUpdate = { updatePass } userID = { userID } token = { token }/> }\n\n            </Container>\n        </>  \n    )\n}\n\nexport default Profile\n","import Card from 'react-bootstrap/Card'\n\nconst Message = ({ message,token, onDelete }) => {\n    return (\n        <div className='col-md-6'>\n            <Card>\n            <Card.Body>\n                <Card.Title className='message-text'>\n                   { message.meg }\n                </Card.Title>\n                <Card.Subtitle className='message-sender'>\n                    { message.senderFirstName + ' ' +  message.senderLastName }\n                </Card.Subtitle>\n                <Card.Link onClick ={ () =>  onDelete(token, message._id)}> Delete </Card.Link>\n            </Card.Body>    \n        </Card>\n        </div>\n    )\n}\n\nexport default Message\n","import Row from 'react-bootstrap/Row'\nimport Message from './_Message'\n\nconst _MessagesList = ({ messages, token, onDelete }) => {\n    return (\n        <Row>\n            {messages.length === 0 ? 'No messages found' : \n                messages.map((message) => (\n                    <Message key = { message._id } message = { message } token = { token } onDelete = { onDelete }/>\n                ))\n            }\n        </Row>\n    )\n}\n\nexport default _MessagesList\n","import { useState } from 'react'\n\nconst SendMessageForm = ({ onAdd, token }) => {\n\n    const [idValue, setIdValue] = useState('')\n    const [message, setMessage] = useState('')\n\n    const onSubmit = (e) => {\n\n        e.preventDefault()\n\n        if(!idValue || !message){\n            alert('Please fill in the required fields')\n            return\n        }\n\n        // here we will send the message\n        const formData = {\n            msg: message\n        }\n\n        onAdd(token ,idValue, formData)\n\n        // for now, console.log the id and the message\n        console.log('id ', idValue)\n        console.log('message ', message)\n\n        //reset the fields\n        setIdValue('')\n        setMessage('')\n    }\n\n    return (\n        <form onSubmit={ onSubmit }>\n            {/* Recipient's ID (for now, will be chaged to email later) */}\n            <br />\n            <input type='text' className='form-control' id='recipient-id' value={ idValue } onChange={ (e) => setIdValue(e.target.value ) } placeholder=' Please enter the id.'/>\n\n            {/* Message */}\n            <input type='text' className='form-control' id='recipient-id' value={ message } onChange={ (e) => setMessage(e.target.value ) } placeholder=' Please enter the message.'/>\n\n            <input type='submit' className='btn btn-primary' value='Send Message'/>\n\n\n            {/* Other values will be filled with logged in values */}\n        </form>\n    )\n}\n\nexport default SendMessageForm\n","import { useState, useEffect } from 'react'\nimport { useHistory } from 'react-router-dom'\nimport MessagesList from './partials/_MessagesList'\nimport SendMessageForm from './partials/_SendMessageForm'\nimport Header from './partials/_Header'\nimport Container from 'react-bootstrap/Container'\nimport Button from 'react-bootstrap/Button'\n\nimport { readAllMessages,sendOneMessage, deleteOneMessage } from '../Controllers/user'\nimport getCookie from '../Controllers/additionals'\n\nconst Messages = () => {\n\n    const [messageFormToggle, setMessageFormToggle] = useState(false);\n    const [messages, setMessages] = useState([]);\n\n    const token = getCookie('token')\n    // const userID = getCookie('entry-app-user-id');\n    const userName = getCookie('entry-app-user-name');\n\n    const history = useHistory()\n\n    useEffect(() => {\n        const getMessages = async() => {\n            try {\n                const data = await readAllMessages(token)\n                if(data.result !== null){\n                    setMessages(data.result)\n                }else{\n                    history.push('/500')\n                }\n            } catch (error) {\n                history.push('/500')\n            }\n        }\n\n        getMessages()\n    },[token, history])\n\n    // send message function\n    const sendMessage = async(token, receiverID, formData) => {\n        await sendOneMessage(token,receiverID,formData)\n    }\n\n    // delete message function\n    const deleteMessages = async(token, messageID) => {\n        await deleteOneMessage(token,messageID)\n    }\n\n    return (\n        <>\n            <Header  user = { userName }/>\n            <Container>\n            <h1> Messages </h1>\n\n                <MessagesList messages = { messages } onDelete = { deleteMessages } token = { token }/>\n                <Button varient='primary' onClick={ () => setMessageFormToggle(!messageFormToggle) }> Send Message </Button>\n\n                { messageFormToggle && <SendMessageForm  onAdd = { sendMessage } token = { token }/> }\n            </Container>\n        </>\n    )\n}\n\nexport default Messages","import  Container  from 'react-bootstrap/Container'\nimport { Link } from 'react-router-dom'\n\nconst Error500 = () => {\n    return (\n        <Container>\n            <h1> Error : 500 </h1>\n            <p> Error while connecting to the server </p>\n            <Link to='/user'> Go back </Link>\n        </Container>\n    )\n}\n\nexport default Error500\n","import './App.css';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n\n\nimport Login from './Components/Login'\nimport Register from './Components/Register'\nimport UserDashboard from './Components/UserDashboard'\nimport BookDashboard from './Components/BookDashboard';\nimport Profile from './Components/Profile';\nimport Messages from './Components/Messages';\nimport Error500 from './Components/500'\n\n\n\nfunction App() {\n  return (\n    <>\n    <Router>\n     <Switch>\n        <Route exact path=\"/\">\n          <Login />\n        </Route>\n\n        <Route exact path=\"/register\">\n          <Register />\n        </Route>\n\n        <Route exact path=\"/user\">\n          <UserDashboard />\n        </Route>\n\n        <Route exact path=\"/500\">\n          <Error500 />\n        </Route>\n\n        <Route exact path='/book/:bookID'>\n          <BookDashboard  />\n        </Route>\n\n        <Route exact path=\"/profile\">\n          <Profile />\n        </Route>\n\n        <Route exact path='/messages'>\n          <Messages />\n        </Route>\n\n     </Switch>\n    </Router>\n      \n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}